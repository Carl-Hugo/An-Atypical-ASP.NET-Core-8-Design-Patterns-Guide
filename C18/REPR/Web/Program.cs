#undef MY_EXCEPTION_MIDDLEWARE
#if MY_EXCEPTION_MIDDLEWARE
using Microsoft.AspNetCore.Diagnostics;
using Web;
#endif

using Microsoft.EntityFrameworkCore;
using Web.Features;

var builder = WebApplication.CreateBuilder(args);
builder.AddExceptionMapper(builder =>
{
    builder
        .Map<DbUpdateException>()
        .ToStatusCode(StatusCodes.Status409Conflict)
    ;
    builder
        .Map<DbUpdateConcurrencyException>()
        .ToStatusCode(StatusCodes.Status409Conflict)
    ;
});
builder.AddFeatures();

#if MY_EXCEPTION_MIDDLEWARE
builder.Services.AddSingleton<MyExceptionMiddleware>();
#endif

var app = builder.Build();
app.UseExceptionMapper();

#if MY_EXCEPTION_MIDDLEWARE
app.UseExceptionHandler(errorApp =>
{
    errorApp.Use(async (context, next) =>
    {
        var exceptionHandlerPathFeature = context.Features
            .Get<IExceptionHandlerFeature>() ?? throw new NotSupportedException();
        var logger = context.RequestServices
            .GetRequiredService<ILoggerFactory>()
            .CreateLogger("ExceptionHandler");
        var exception = exceptionHandlerPathFeature.Error;
        logger.LogWarning(
            "An exception occurred: {message}",
            exception.Message
        );
        await next(context);
    });
    errorApp.UseMiddleware<MyExceptionMiddleware>();
});
#endif

app.MapFeatures();

await app.SeedFeaturesAsync();

app.Run();

// Workaround that makes the autogenerated program public so tests can
// access it without granting internal visibility.
#pragma warning disable CA1050 // Declare types in namespaces
public partial class Program { }

#if MY_EXCEPTION_MIDDLEWARE
public class MyExceptionMiddleware : IMiddleware
{
    public async Task InvokeAsync(HttpContext context, RequestDelegate next)
    {
        var exceptionHandlerPathFeature = context.Features
            .Get<IExceptionHandlerFeature>() ?? throw new NotSupportedException();

        var exception = exceptionHandlerPathFeature.Error;
        await context.Response.WriteAsJsonAsync(new
        {
            Error = exception.Message
        });
        await next(context);
    }
}
#endif