@page "/fetchdata"
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary mb-4" @onclick="RefreshAsync">Refresh</button>
    <button class="btn btn-primary mb-4" @onclick="DisplayXY">Display (X, Y)</button>
    <button class="btn btn-primary mb-4" @onclick="@(e => Console.WriteLine($"DOM(x, y): ({e.ClientX}, {e.ClientY})"))">Lamdba (X, Y)</button>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private Cycle _uriList = new(
        "sample-data/weather1.json",
        "sample-data/weather2.json",
        "sample-data/weather3.json"
    );

    protected override Task OnInitializedAsync() => LoadWeatherAsync();

    private Task RefreshAsync() => LoadWeatherAsync();

    private async Task LoadWeatherAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>(_uriList.Next());
    }

    public record WeatherForecast(DateTime Date, int TemperatureC, string Summary)
    {
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    public void DisplayXY(MouseEventArgs e)
    {
        Console.WriteLine($"DOM(x, y): ({e.ClientX}, {e.ClientY}) | Button(x, y): ({e.OffsetX}, {e.OffsetY}) | Screen(x, y): ({e.ScreenX}, {e.ScreenY})");
    }

    private class Cycle
    {
        private int _currentIndex = -1;
        private string[] _uris;
        public Cycle(params string[] uris) => _uris = uris;
        public string Next() => _uris[++_currentIndex % _uris.Length];
    }
}
